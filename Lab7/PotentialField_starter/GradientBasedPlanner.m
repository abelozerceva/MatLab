function route = GradientBasedPlanner (f, start_coords, end_coords, max_its)
% —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –ø—É—Ç—å –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏ f 
% –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
%     start_coords –∏ end_coords -- –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–µ–∫
%     max_its -- –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π 
% –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
%     route -- –º–∞—Å—Å–∏–≤ –∏–∑ 2 —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ n —Å—Ç—Ä–æ–∫
%     –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º x, y —Ä–æ–±–æ—Ç–∞ (–ø–æ –º–µ—Ä–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—É—Ç–∏)

[gx, gy] = gradient (-f);

% *******************************************************************
% –í–ê–® –ö–û–î –î–û–õ–ñ–ï–ù –ù–ê–•–û–î–?–¢–¨–°–Ø –ó–î–ï–°–¨
route = start_coords;
n = 1;
tmp = start_coords;
distance = [];
% gx(tmp(2),tmp(1))
while n < (max_its - 1)
    grad = [gx(round(tmp(2)),round(tmp(1))) gy(round(tmp(2)),round(tmp(1)))];
    last = tmp;
    tmp = tmp + 0.5*grad/norm(grad);   
    dist = sqrt((end_coords(1) - tmp(1))^2 + (end_coords(2) - tmp(2))^2);
    if dist < 2
        break;
    end
    tmp_dist = sqrt((last(1) - tmp(1))^2 + (last(2) - tmp(2))^2);
%     if (tmp_dist > 1.0)
%         distance = [distance; n tmp_dist];
%     end
    n = n + 1;
    route = [route; tmp];
end
% *******************************************************************

end
